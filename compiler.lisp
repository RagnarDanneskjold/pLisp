(defmacro record (varlist val &body body)
  `(apply (lambda ,varlist  ,@body) ,val))

(defmacro record-case (exp &rest clauses)
  (let ((r (gensym))
        (cond-clause))
    (dolist (c clauses)
      (print c)
      (if (equal c (car (last clauses)))
          (setq cond-clause (nconc cond-clause (list (list 't (append '(progn) (cdr c))))))
        (setq cond-clause (nconc cond-clause (list (list (list 'equal `(car ,r) (car c))
                                                         (list 'record (cadr c) `(cdr ,r) (append '(progn) (cddr c)))))))))
    `(let ((,r ,exp))
       (cond ,@cond-clause))))

(defun plisp-tailp (x)
  (eq (car x) 'return))

(defun plisp-compile (x next)
  (cond ((symbolp x) (list 'refer x next))
        ((listp x)
         (record-case x
                      ('quote (obj) 
                              (list 'constant obj next))
                      ('lambda (vars body)
                        (list 'close vars (plisp-compile body '(return)) next))
                      ('if (test then else)
                          (let ((thenc (plisp-compile then next))
                                (elsec (plisp-compile else next)))
                            (plisp-compile test (list  'test thenc elsec))))
                      ('set (var x)
                           (plisp-compile x (list 'assign var next)))
                      ('call-cc (x)
                                (let ((c (list 'conti (list 'argument (plisp-compile x '(apply))))))
                                  (if (plisp-tailp next)
                                      c
                                      (list 'frame next c))))
                      (else (labels ((compile-loop (args c)
                                                  (if (null args)
                                                      (if (plisp-tailp next)
                                                          c
                                                          (list 'frame next c))
                                                      (compile-loop (cdr args)
                                                                    (plisp-compile (car args) (list 'argument c))))))
                              (compile-loop (cdr x) (plisp-compile (car x) '(apply)))))))
        (t (list 'constant x next))))

